@use "sass:math";
// TO
@function prc($pxOne, $pxTwo) {
  $result: math.div($pxOne, $pxTwo) * 100%;
  @return $result;
}
// REM
@function rem($px) {
  $result: math.div($px, 16) + rem;
  @return $result;
}
// EM
@function em($px) {
  $result: math.div($px, 16) + em;
  @return $result;
}

// Адаптивное свойство
$maxWidthContainer: 37;
$minWidth: 17;
@mixin adaptiv-value($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;
  //
  @if $type == 1 {
    #{$property}: $startSize + px;
    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} *
          ((100vw - #{$minWidth + px}) / #{$maxWidthContainer - $minWidth})
      );
    }
  } @else if $type == 2 {
    //Толька если больше контейнера
    #{$property}: $startSize + px;
    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} *
          ((100vw - #{$minWidth + px}) / #{$maxWidthContainer - $minWidth})
      );
    }
  } @else {
    #{$property}: calc(
      #{$minSize +
        px} +
        #{$addSize} *
        ((100vw - #{$minWidth + px}) / #{$maxWidthContainer - $minWidth})
    );
  }
}

$screens: (all, 1023, 768, 746);

@mixin media($property, $values) {
  /*разбиваем введенные значения в цикле*/
  @for $i from 1 through length($values) {
    /*Проверяем, если значение прописано как '' тогда пропускаем его*/
    @if nth($values, $i) != "" {
      @if nth($screens, $i) == "all" {
        /*Если это первое значение, тогда значение пропишется без @media screen */
        #{$property}: unquote(#{nth($values, $i)}) !important;
      } @else {
        /*иначе помещаем свойство в @media screen с соответствующим индексом*/
        @media screen and (max-width: (nth($screens, $i) + "px")) {
          #{$property}: unquote(#{nth($values, $i)}) !important;
        }
      }
    }
  }
}

$screens2: (all, 1300, 1023, 769, 426, 320);

@mixin media2($property, $values) {
  /*разбиваем введенные значения в цикле*/
  @for $i from 1 through length($values) {
    /*Проверяем, если значение прописано как '' тогда пропускаем его*/
    @if nth($values, $i) != "" {
      @if nth($screens2, $i) == "all" {
        /*Если это первое значение, тогда значение пропишется без @media screen */
        #{$property}: unquote(#{nth($values, $i)}) !important;
      } @else {
        /*иначе помещаем свойство в @media screen с соответствующим индексом*/
        @media screen and (max-width: (nth($screens2, $i) + "px")) {
          #{$property}: unquote(#{nth($values, $i)}) !important;
        }
      }
    }
  }
}

@mixin fontSize($value, $minus) {
  @include media(
    font-size,
    ($value + px, $value - $minus + px, $value - $minus * 1.5 + px)
  );
}
@mixin center {
  display: flex;
  justify-content: center;
}

@mixin defaultBackground {
  background-color: $color-white;
  border-radius: 1rem;
  @include media(padding, (3rem, 2rem, 0.5rem));
}

@mixin normalNano {
  font-family: "Noto Sans";
  font-style: normal;
  font-weight: 500;
}
@mixin elipse {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  height: 100%;
}

@mixin shine {
  background: #eee;
  background: linear-gradient(110deg, #ececec 8%, #f5f5f5 18%, #ececec 33%);
  border-radius: 5px;
  background-size: 200% 100%;
  animation: 1.5s shine linear infinite;

  @keyframes shine {
    to {
      background-position-x: -200%;
    }
  }
}

@mixin hoverBtn {
  cursor: pointer;
  &:hover {
    background: $primary-color;
    color: $color-white;
  }
}
@mixin hoverOpacity {
  cursor: pointer;
  opacity: 0.7;
  &:hover {
    opacity: 1;
  }
}

@mixin hoverText {
  cursor: pointer;

  &:hover {
    color: $primary-color;
  }
}

@mixin flexCenter {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin defaultPrimaryButton {
  @include flexDefault;
  background: $primary-color;
  color: $color-white;
  height: 100%;
  align-items: center;
  padding: 1rem;
  border-radius: 0.5rem;
  @include hoverOpacity;
  transition: all 1s;
}
@mixin popup($right, $width, $top: 1.8rem) {
  &__popup {
    position: absolute;
    top: $top;
    right: $right;
    background: $color-white;
    border: 1px solid $background-input;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.25);
    border-radius: 4px;
    width: $width;
    padding: 1rem 1rem;
    z-index: 999999;
    text-decoration: none;
    ul {
      li {
        list-style: none;
        color: $color-black;
        @include hoverText;
        width: 100%;
        margin: 1rem 0;
        font-size: 14px;
        line-height: 19px;
      }
    }
    &--logout {
      color: $color-red !important;
      margin-top: 2rem !important;
    }
  }
}

@mixin defaultGradient {
  &::before {
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90.21deg,
      rgba(0, 0, 0, 0.54) 25.22%,
      rgba(0, 0, 0, 0) 63.52%
    );
    border-radius: 10px;
  }
}
